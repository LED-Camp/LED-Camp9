<% def getGuardCode(str){str!=null&&str.trim().size()>1\
    ?"&& (" + str + ")"\
    :""}%>\
#include <stdio.h>
#include "includes/Event.hpp"
#include "${u.name}.hpp"
#include <unistd.h>

${u.name}::${u.name}(Controller *controller){
  this->state = _STATE_INITIAL;
  this->controller = controller;

<% for(var in u.iclass.getAttributes()){%>\
<% if(var.getAssociation() == null){%>\
<% if(var.getType().isPrimitiveType()){%>\
  this->${var.getName()} = 0;
<%}%>\
<%}%>\
<%}%>\
}

void ${u.name}::execState(){
  switch(this->state){
<% for(state in u.states){ %>\
  case STATE_${state.name}:
    ${state.doActivity}
    break;
<% } %>\
  default:
    break;
  }
}

void ${u.name}::doTransition(unsigned long event){
  this->_beforeState = this->state;

  switch(this->state){
  case _STATE_INITIAL:
    this->state = STATE_${u.initialState};

    //entry
    ${u.initialState.entry}

    break;  
<% for(state in u.states){ %>\
  case STATE_${state.name}:
<% def firstFlag = true %>\
<% for(t in state.outgoings){ %>\
<% if(firstFlag){ firstFlag = false; } else {%>\
    else
<% } %>\
    if(((event & ${t.event}) != 0) ${getGuardCode(t.guard)}){
      // exit
      ${state.exit}

      //action
      ${t.action}

      this->state = STATE_${t.target.name};

      //entry
      ${t.target.entry}
    }
<% } %>\
    break;
<% } %>\
  default:
    break;
  }
}

void ${u.name}::printValues(){
#ifndef DISABLE_PRINT_OUTPUT
    printf("distance=%f, angle=%f \\n", positionValue.distance, positionValue.angle);
    printf("range=%f \\n", rangeDistance);
    printf("color: R=%d, G=%d, B=%d \\n", colorValue.red, colorValue.green, colorValue.blue);
    printf("line: l=%d, c=%d, r=%d \\n", lineValue.left, lineValue.center, lineValue.right);
#endif
}
